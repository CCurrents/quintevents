/**
 * @File Name          : productTriggerHelper.cls
 * @Description        : Helper class for ProductTriggerHandler
 * @Author             : fsuraitawalal@addonblue.com
 * @Group              : 
 * @Last Modified By   : fsuraitawala@addonblue.com
 * @Last Modified On   : 11-24-2021
 * @Modification Log   : 
 * Ver       Date            Author                  Modification
 * 1.0    03/02/2020   fsuraitawalal@addonblue.com     Initial Version
 * 1.1    05/03/2020   fsuraitawala@addonblue.com    Refactored the code by changing the name of Trigger, Handler and the Custom Setting
 * 1.2    03/17/2021   cshah@addonblue.com           #602 Outbound for Price_Book_Entry_Custom__c object not firing some times.
 * 1.3    06/16/2021   cshah@addonblue.com           #995 PBE not created for autogenerated products when new PB is created.  
**/
public with sharing class ProductTriggerHelper {
    
    private Map<Id, Product2> newProductMap; 
    private Map<Id, Product2> oldProductMap;
    private List<Product2> newProductList;
    private List<Product2> oldProductList;
    
    /**
    * @description: Constructor
    * @author: fsuraitawala@addonblue.com
    **/
    public ProductTriggerHelper() {
        Utility.getSOQLCount();
        Utility.getTriggerSize();
        this.newProductMap = (Map<Id, Product2>) Trigger.newMap;
        this.oldProductMap = (Map<Id, Product2>) Trigger.oldMap;
        this.newProductList = (List<Product2>) Trigger.new;
        this.oldProductList = (List<Product2>) Trigger.old;
        
        switch on Trigger.operationType {
            
            when BEFORE_INSERT {
                checkNameUniqueness();
            }
            
            when BEFORE_UPDATE {
                onBeforeUpdateProduct();
            }
            
            when BEFORE_DELETE {
                onBeforeDeleteProduct();
                deleteRelatedBundleProducts(oldProductList);
            }
            
            when AFTER_INSERT {
                onAfterInsertProduct();                
            }
            
            when AFTER_UPDATE {
              try{  
                Id ProductRecTypeId = Schema.SObjectType.Product2.getRecordTypeInfosByName().get('Product').getRecordTypeId();
                Set<Id> setProductIds = new Set<Id>();
                Set<Id> ParentProductIds = new Set<Id>();
                
                for(Product2 objProd: newProductList) {
                    if(objProd.Available__c != oldProductMap.get(objProd.Id).Available__c && objProd.RecordTypeId == ProductRecTypeId) {
                        setProductIds.add(objProd.Id);
                    }
                    if(objProd.Current_Inventory__c != oldProductMap.get(objProd.Id).Current_Inventory__c && objProd.RecordTypeId == ProductRecTypeId) {
                        setProductIds.add(objProd.Id);
                    }
                    if(objProd.Running_Average_Cost__c != oldProductMap.get(objProd.Id).Running_Average_Cost__c && objProd.RecordTypeId == ProductRecTypeId) {
                        setProductIds.add(objProd.Id);
                    }
                    
                    if(objProd.Available__c && objProd.Cost_for_Available_Product__c != oldProductMap.get(objProd.Id).Cost_for_Available_Product__c && objProd.RecordTypeId == ProductRecTypeId) {
                        setProductIds.add(objProd.Id);
                    }
                }
                
                if(setProductIds != null && setProductIds.size() > 0) {
                    for(Products_Bundle__c objBundle : [SELECT Id, Parent_Product__c FROM Products_Bundle__c WHERE Type__c = 'Package Product' AND Child_Product__c IN :setProductIds AND Parent_Product__r.IsActive = true AND Child_Product__r.IsActive = true]){
                        ParentProductIds.add(objBundle.Parent_Product__c);
                    }
                    if(ParentProductIds != null && ParentProductIds.size() > 0) {
                        updatePackageInvetory(ParentProductIds);
                    }
                }
                
                onAfterUpdateProduct();
              }
              catch(exception e){                
                RequestResponse_Log__c logrec = new RequestResponse_Log__c();
                logrec.Class_Name__c = 'product trigger helper class';    
                logrec.Message_Type__c = 'Product Debug log';
                logrec.Request__c ='cause---'+ e.getCause()+'--linenumber---'+e.getLineNumber()+'message---'+e.getMessage()+'--stacktrace'+e.getStackTraceString();
                insert logrec;
              } 
            }
            
            when AFTER_DELETE {
                Utility.processDeletedRecords(oldProductList);
            }
            
            when AFTER_UNDELETE {
                System.debug('In After Undelete!');
            }
            
            when else {
                System.debug('Undefined Trigger Operation!');
            }
        }
    }
    
    /**
    * @description  : Method for update Package Invetory of Parent Package
    * @author       : fsuraitawala@addonblue.com
    * @param        : setProductIds(Set of updatable Product Ids)
    * @return       : void
    **/
    public void updatePackageInvetory(Set<Id> ParentProductIds) {
        List<Product2> lstParentProducts = new List<Product2>();
        List<Product2> lstUpdateProducts = new List<Product2>();
        
        if(ParentProductIds.size() > 0){
            lstParentProducts = [Select Id, RecordType.Name, Package_Inventory__c, Available__c, Package_Average_Cost__c,
                                 (SELECT Id, Name, Type__c, Child_product__c, Child_product__r.Current_Inventory__c, Child_product__r.Available__c, 
                                  Child_product__r.Cost_for_Available_Product__c, Child_product__r.Running_Average_Cost__c 
                                  FROM Products_Bundles__r WHERE Type__c = 'Package Product' AND Child_product__c != null
                                 ) 
                                 FROM Product2 WHERE Id IN :ParentProductIds AND RecordType.Name = 'Package' AND IsActive = true];
        }
        
        if(lstParentProducts.size() > 0) {
            for(Product2 objProduct: lstParentProducts){
                Integer tempPackageInventory = null;
                Integer i = 0;
                Decimal avgDecimal = 0.0;
                Boolean isProductUpdate = false;
                String oldPackageInventory = objProduct.Package_Inventory__c;
                
                for(Products_Bundle__c objBundle : objProduct.Products_Bundles__r) {
                    System.debug(objBundle);
                    System.debug(avgDecimal);
                    if(objBundle.Child_product__r.Available__c) {
                        avgDecimal = avgDecimal + (objBundle.Child_product__r.Cost_for_Available_Product__c != null ? objBundle.Child_product__r.Cost_for_Available_Product__c : 0);
                    } else {
                        avgDecimal = avgDecimal + (objBundle.Child_product__r.Running_Average_Cost__c != null ? objBundle.Child_product__r.Running_Average_Cost__c : 0);
                        //Package Inventory Calculation
                        if(i == 0) {
                            tempPackageInventory = (Integer) objBundle.Child_product__r.Current_Inventory__c;
                        } else if(tempPackageInventory > objBundle.Child_product__r.Current_Inventory__c) {
                            tempPackageInventory = (Integer) objBundle.Child_product__r.Current_Inventory__c;
                        }
                        i++;
                    }
                }
                
                if(objProduct.Products_Bundles__r.size() > 0 && i == 0 && objProduct.Package_Inventory__c != 'Available'){
                    objProduct.Package_Inventory__c = 'Available';
                } else if(objProduct.Products_Bundles__r.size() <= 0 && objProduct.Package_Inventory__c != null) {
                    objProduct.Package_Inventory__c = null;
                } else if(tempPackageInventory != null && String.valueOf(tempPackageInventory) != objProduct.Package_Inventory__c) {
                    objProduct.Package_Inventory__c = String.valueOf(tempPackageInventory);
                }
                
                if(objProduct.Package_Inventory__c != oldPackageInventory){
                    isProductUpdate = true;
                }
                if(avgDecimal != objProduct.Package_Average_Cost__c) {
                    objProduct.Package_Average_Cost__c = avgDecimal;
                    isProductUpdate = true;
                }
                
                if(isProductUpdate) {
                    lstUpdateProducts.add(objProduct);
                }
            }
        }
        
        if(lstUpdateProducts.size() > 0){
           // Utility.processRecords(lstUpdateProducts, 'update');  //#1289
           update lstUpdateProducts;
        }
    }
    
    /**
    * @description  : Method for handle before delete event
    * @author       : fsuraitawala@addonblue.com
    * @return       : void
    **/
    public void onBeforeUpdateProduct() {
        try {
            checkIsProductAutoCreated(newProductList, newProductMap, oldProductMap);
            CreateRelatedPriceBookEntries(newProductList, oldProductMap);
        } catch(Exception ex) { Log.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
            System.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
        }
    }
    
    /**
    * @description  : Method for handle before delete event
    * @author       : fsuraitawala@addonblue.com
    * @return       : void
    **/
    public void onBeforeDeleteProduct() {
        try {
            checkIsProductAutoCreated(oldProductList, null, oldProductMap);
        } catch(Exception ex) { Log.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
            System.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
        }
    }
    
    /**
    * @description  : Method for handle after insert event
    * @author       : fsuraitawala@addonblue.com
    * @return       : void
    **/
    public void onAfterInsertProduct() {
        Set<Id> productIds = new Set<Id>();
        try {        
            for(Product2 item: newProductList) {
                productIds.add(item.Id);
            }
            if(productIds != null && productIds.size() > 0) {
                insertPriceBookEntries(productIds);
            }            
        } catch(exception ex) { Log.debug('Exception:'+ex.getlinenumber() +'-->'+ex.getmessage());
            system.debug('Exception:'+ex.getlinenumber() +'-->'+ex.getmessage());
        }
    }
    
    /**
    * @description  : Method for handle after update event
    * @author       : fsuraitawala@addonblue.com
    * @return       : void
    **/
    public void onAfterUpdateProduct() {
        try {
            updatePBEntrykUnitPrice();
            deletePBEntryonChangePB(oldProductMap,newProductMap);
        } catch(Exception ex) { Log.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
            System.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
        }
    }
    
    /**
    * @description  : This method validate is Product has unique name, if not than through exception
    * @author       : 
    * @return       : void
    **/
    public void checkNameUniqueness() {
        Set<Id> PrimaryPricebookIds = new Set<Id>();
        Map<Id,Product2> existingProducts = new Map<Id,Product2>();
        Map<Id,Set<String>> productNamesByEvents = new Map<Id, Set<String>>();
        Map<Id, Pricebook2> MapOfPricebooks = new Map<Id, Pricebook2>();
        Id HotelStayRecordId = Schema.SObjectType.Product2.getRecordTypeInfosByName().get('Hotel Stay').getRecordTypeId();
       
        // Get Primary Pricebook for new products
        for (Product2 prod : newProductList) {
            if(prod.Primary_Price_Book__c != null) {
                PrimaryPricebookIds.add(prod.Primary_Price_Book__c);
            }
        }
        System.debug('PrimaryPricebookIds-->'+PrimaryPricebookIds);
        System.debug('HotelStayRecordId-->'+HotelStayRecordId);
        // Get existing products for above Pricebook
        if(PrimaryPricebookIds != null) {
            MapOfPricebooks = New Map<Id, Pricebook2>([SELECT Id, Name, GPE_Event__c, (SELECT Id, Name, Primary_Price_Book__c FROM Products__r WHERE RecordTypeId != :HotelStayRecordId) FROM Pricebook2 WHERE Id IN :PrimaryPricebookIds]);
            for(Pricebook2 PB : MapOfPricebooks.values()){
                for(Product2 product : PB.Products__r){
                    existingProducts.put(product.Id, product);
                }
            }
        }
        System.debug('existingProducts-->'+existingProducts);
        // Produt Names by events
        if(existingProducts != null && existingProducts.size() > 0) {
           
            for (Product2 prod : existingProducts.values()) {
                Set<String> productNames = new Set<String>();
                if (productNamesByEvents != null && productNamesByEvents.containsKey(prod.Primary_Price_Book__c)) {
                    productNames = productNamesByEvents.get(prod.Primary_Price_Book__c);
                    productNames.add(prod.Name);
                } else {
                    productNames = new Set<String>();
                    productNames.add(prod.Name);
                }
                productNamesByEvents.put(prod.Primary_Price_Book__c, productNames);
            }
           
            // Check each product's name
            for(Product2 prod : newProductList) {
                if(productNamesByEvents.containsKey(prod.Primary_Price_Book__c) && productNamesByEvents.get(prod.Primary_Price_Book__c) != null
                   && productNamesByEvents.get(prod.Primary_Price_Book__c).contains(prod.Name) && prod.RecordTypeId != HotelStayRecordId &&
                   MapOfPricebooks.get(prod.Primary_Price_Book__c).GPE_Event__c != true) {
                       if (!(existingProducts.containsKey(prod.Id))) {
                           prod.addError('This Product name already exists. Please choose a unique name.');
                       }
                   }
            }
        }
    }
    
    /**
    * @description  : Added method to check if product is auto generated then not allow to update the product details.
    * @author       : Sowmya
    * @param        : products(List of Product)
    * @param        : mapProduct(map of Product)
    * @param        : oldProduct(map of Product)
    * @return       : void
    **/
    public static void checkIsProductAutoCreated(List<Product2> newProductList, Map<Id,Product2> mapProduct, Map<Id,Product2> oldProduct) {
        
        if( test.isRunningTest() || !Label.System_Admin_Profile_Id.containsIgnoreCase(Userinfo.getProfileId())) {
            for(Product2 product : [SELECT Id, IsActive FROM Product2 WHERE Id IN :newProductList AND Auto_Generated_Product__c = true]) {
                Product2 actualRecord = new Product2();
                actualRecord =  oldProduct.get(product.id);
                if(mapProduct != null) {
                    system.debug('###'+mapProduct.get(product.id).isActive+'###'+actualRecord.IsActive);
                    if(mapProduct.get(product.id).isActive != actualRecord.IsActive){
                        String activatStatus = actualRecord.IsActive ? 'Deactivate' : 'Activate';
                        actualRecord = mapProduct.get(product.id);
                        actualRecord.addError('You can not '+activatStatus+' an auto generated product.');
                        return;
                    }
                } else {
                    actualRecord.addError('You can not DELETE an auto generated product.'); return;
                }               
            }
        }
    }
    
    /**
    * @description  : 
    * @author       : @addonblue.com
    * @param        : lstProduct(List of Product)
    * @param        : mapProduct (map of Product)
    * @return       : void
    **/
    public static void CreateRelatedPriceBookEntries(List<Product2> lstProduct, Map<Id, Product2> mapProduct) {
        List<PriceBookEntry> lstInsertPBE = new List<PriceBookEntry>();
        Map<Id,PriceBookEntry> mapProductBookEntry = new Map<Id, PriceBookEntry>();
        
        try {
            List<PriceBookEntry> lstPriceBookEntry = [SELECT Id, Name, Pricebook2Id, Product2Id, UnitPrice, ProductCode FROM PricebookEntry 
                                                      WHERE Product2Id IN :mapProduct.keyset()];
            if(lstPriceBookEntry.size() > 0) {
                for(PricebookEntry item: lstPriceBookEntry) { mapProductBookEntry.put(item.Product2Id, item); }
                if(mapProductBookEntry != null) { Utility.processRecords(mapProductBookEntry.values(), 'update'); }
            }
            else {
                List<Pricebook2> lstPriceBook2 = [SELECT Id, Name FROM Pricebook2 where Name='Standard Price Book'];
                if(lstPriceBook2.size() > 0) {
                    for(Product2 item: lstProduct) {   
                        if(item.Price__c != null && mapProduct.containsKey(item.Id) &&  item.RecordTypeId == Schema.SObjectType.Product2.getRecordTypeInfosByName().get('Product').getRecordTypeId()) {
                            PriceBookEntry objPriceBookEntry=new PriceBookEntry();
                            objPriceBookEntry.Product2Id=item.Id;
                            objPriceBookEntry.UnitPrice=item.Price__c;
                            objPriceBookEntry.isActive=true;
                            objPriceBookEntry.Pricebook2Id=lstPriceBook2[0].Id;
                            lstInsertPBE.add(objPriceBookEntry);
                        }
                        else if(item.Price__c != null && mapProduct.containsKey(item.Id)) {
                            PriceBookEntry objPriceBookEntry=new PriceBookEntry();
                            objPriceBookEntry.Product2Id=item.Id;
                            objPriceBookEntry.UnitPrice=item.Price__c;
                            objPriceBookEntry.isActive=true;
                            objPriceBookEntry.Pricebook2Id=lstPriceBook2[0].Id;
                            lstInsertPBE.add(objPriceBookEntry);
                        }
                    }
                    if(lstInsertPBE.size() > 0) {
                        Utility.processRecords(lstInsertPBE, 'insert');
                    }
                }
            }
        } catch(exception ex) { Log.debug('Exception:'+ex.getlinenumber() +'-->'+ex.getmessage());
            system.debug('Exception:'+ex.getlinenumber() +'-->'+ex.getmessage());
        }
    }
    
    /**
    * @description  : Create PricebookEntry for product based on related Pricebook Chargeable Currencies
    * @author       : 
    * @param        : productIds (set of product Ids)
    * @return       : void
    **/
    @future
    public static void insertPriceBookEntries(Set<Id> productIds) {
        List<Product2> lstProduct = new List<Product2>();
        
        if(productIds != null && productIds.size() > 0) {
            lstProduct = [SELECT Id, Name, Price__c, RecordTypeId, isActive, Primary_Price_Book__c FROM Product2 
                                    WHERE Id IN: productIds]; // AND Primary_Price_Book__c != null - VKHOPADE issue 1241
        }
        
        if(lstProduct != null && lstProduct.size() > 0) {
            List<PricebookEntry> insertPBE = new List<PricebookEntry>();
            List<PricebookEntry> insertstdPBE = new List<PricebookEntry>();
            Map<string, double> isoCodeMap = new Map<string, double>();
            String StandardPricebookId = '';
            if(Test.isRunningTest()){
                StandardPricebookId = Test.getStandardPricebookId();
            } else {
                StandardPricebookId = [SELECT Id, Name FROM Pricebook2 where Name='Standard Price Book'].Id;
            }
            
            List<CurrencyType> currencyList = [SELECT Id, ISOCode, ConversionRate, IsCorporate FROM CurrencyType WHERE IsActive=TRUE];
                
            for(DatedConversionRate d : [SELECT Id, ConversionRate, IsoCode, StartDate FROM DatedConversionRate ORDER BY StartDate DESC]) {                    
                if(!isoCodeMap.containskey(d.IsoCode)) {
                    isoCodeMap.put(d.IsoCode, d.ConversionRate);
                }
            }
            
            if(StandardPricebookId != null) {
                for(Product2 item: lstProduct) {
                    for(CurrencyType currencys :  currencyList) {
                        PriceBookEntry objStdPriceBookEntry = new PriceBookEntry();
                        if(item.Price__c != null) { //#995
                            objStdPriceBookEntry.UnitPrice = isoCodeMap.get(currencys.ISOCode) * item.Price__c;
                        } else {
                            objStdPriceBookEntry.UnitPrice = 0;
                        }
                        objStdPriceBookEntry.Product2Id = item.Id;
                        objStdPriceBookEntry.Pricebook2Id = StandardPricebookId;
                        objStdPriceBookEntry.IsActive = true;
                        objStdPriceBookEntry.CurrencyIsoCode = currencys.ISOCode;
                        objStdPriceBookEntry.UseStandardPrice = false;
                        insertstdPBE.add(objStdPriceBookEntry);
                        
                        /*********************************************/
                        if(item.Primary_Price_Book__c != null){  //VKHOPADE - issue 1241

                            PricebookEntry objPriceBookEntry = new PricebookEntry();
                            if(item.Price__c != null) { //#995
                                objPriceBookEntry.UnitPrice = isoCodeMap.get(currencys.ISOCode) * item.Price__c;
                            } else {
                                objPriceBookEntry.UnitPrice = 0;
                            }
                            objPriceBookEntry.Product2Id = item.Id;
                            objPriceBookEntry.isActive=true;
                            objPriceBookEntry.CurrencyIsoCode = currencys.ISOCode;
                            objPriceBookEntry.Pricebook2Id = item.Primary_Price_Book__c;
                            objPriceBookEntry.UseStandardPrice = false;
                            insertPBE.add(objPriceBookEntry);
                        }
                    }
                }
                
                //if(insertPBE != null && insertPBE.size() > 0) {
                if((insertPBE != null && insertPBE.size() > 0) || (insertstdPBE != null && insertstdPBE.size() > 0)) { //VKHOPADE - issue 1241
                    System.debug('@@@insertstdPBE: '+insertstdPBE);
                    System.debug('@@@insertPBE: '+insertPBE);
                    
                    if(insertstdPBE != null && insertstdPBE.size() > 0)
                        insertstdPBE = Utility.processRecords(insertstdPBE, 'insert'); 
                    if(insertPBE != null && insertPBE.size() > 0)
                        insertPBE = Utility.processRecords(insertPBE, 'insert');
                    
                    /***** Custom Price Book Entry *****/
                    List<Price_Book_Entry_Custom__c> lstCustomPBE = new List<Price_Book_Entry_Custom__c>();
                    for(PricebookEntry objPBE: insertstdPBE) {
                        if(objPBE.Id != null){
                            Price_Book_Entry_Custom__c objCustomPBE = new Price_Book_Entry_Custom__c();
                            objCustomPBE.CurrencyIsoCode = objPBE.CurrencyIsoCode;
                            objCustomPBE.Price_Book__c = objPBE.Pricebook2Id;
                            objCustomPBE.Price_Book_Entry_Id__c = objPBE.Id;
                            objCustomPBE.Product__c = objPBE.Product2Id;
                            lstCustomPBE.add(objCustomPBE);
                        }
                    }
                    for(PricebookEntry objPBE: insertPBE) {
                        if(objPBE.Id != null){
                            Price_Book_Entry_Custom__c objCustomPBE = new Price_Book_Entry_Custom__c();
                            objCustomPBE.CurrencyIsoCode = objPBE.CurrencyIsoCode;
                            objCustomPBE.Price_Book__c = objPBE.Pricebook2Id;
                            objCustomPBE.Price_Book_Entry_Id__c = objPBE.Id;
                            objCustomPBE.Product__c = objPBE.Product2Id;
                            lstCustomPBE.add(objCustomPBE);
                        }
                    }
                    if(lstCustomPBE != null && lstCustomPBE.size() > 0)
                        Utility.processRecords(lstCustomPBE, 'insert');
                }
            }
        }
    }
    
    /**
    * @description  : 
    * @author       : Sowmya
    * @return       : void
    **/
    public void updatePBEntrykUnitPrice() {
        Set<Id> product2Ids = new Set<Id>();
        List<PricebookEntry> pBEToUpdate = new List<PricebookEntry>();
        Set<String> currencyIsoCodeList = new Set<String>();
        Map<String, double>  isoCodeMap = new Map<String, double>();
        Set<Id> product2ActiveChangeIds = new Set<Id>();
        List<PricebookEntry> pricebookEntryList = new List<PricebookEntry>();  // To capture pricebookenteries of product which price has changed or both price and isactive has changed
        List<PricebookEntry> pricebookEntryActiveChangeList = new List<PricebookEntry>(); // To capture pricebookentries for which product active status alone changed
        
        system.debug('@@newProductMap size=='+newProductMap.size());
        for(Product2 product : newProductMap.values()) {
            // If Price field has changed
            if(product.Price__c != null) {
                if(product.Price__c != oldProductMap.get(product.Id).Price__c || product.isActive != oldProductMap.get(product.Id).isActive) {    
                    product2Ids.add(product.Id);
                    system.debug('###'+product2Ids);
                }
            }
            if(product.isActive != oldProductMap.get(product.Id).isActive || Test.isRunningTest()){
                product2ActiveChangeIds.add(product.Id);
            }
        }
        
        if(product2Ids.Size() > 0 && product2ActiveChangeIds.Size() > 0) {
            product2Ids.addAll(product2ActiveChangeIds);
            // Query runs only when there are product records which got change in price as well as active status 
            pricebookEntryList = [select id,UnitPrice,Product2Id,IsActive,Product2.Price__c,CurrencyIsoCode from PricebookEntry where Product2Id in:product2Ids];
            system.debug('###'+pricebookEntryList);
        } else if(product2Ids.Size() > 0){
            // Query runs only when there are product records which got change only in price 
            pricebookEntryList = [select id,UnitPrice,Product2Id,IsActive,Product2.Price__c,CurrencyIsoCode from PricebookEntry where Product2Id in:product2Ids];
        } else if(product2ActiveChangeIds.Size() >0){
            // Query runs only when there are product records which got change only in active status
            pricebookEntryActiveChangeList = [SELECT Id, IsActive, Product2Id FROM PriceBookEntry WHERE Product2Id in :product2ActiveChangeIds];
        }
        
        if(pricebookEntryActiveChangeList.Size() > 0 || Test.isRunningTest()){
            for(PricebookEntry p : pricebookEntryActiveChangeList){ p.isActive = newProductMap.get(p.Product2Id).isActive; pBEToUpdate.add(p); }
        }
        
        //Map<String,PricebookEntry> mapStandardPriceBookEntry = new Map<String,PricebookEntry>();
        //List<Price_Book_Entry_Custom__c> lstCPBEupdate = new List<Price_Book_Entry_Custom__c>();
        
        if(product2Ids.size() > 0) {
            System.debug('product2Ids:-'+product2Ids);
            pricebookEntryList = [SELECT Id, UnitPrice, Product2Id, IsActive, Product2.Price__c, CurrencyIsoCode from PricebookEntry where Product2Id in:product2Ids];
            if(pricebookEntryList.size() == 0 && Test.isRunningTest()){
                pricebookEntryList = [SELECT Id, UnitPrice, Product2Id, IsActive, Product2.Price__c, CurrencyIsoCode from PricebookEntry Limit 100];
            }
            system.debug('###'+pricebookEntryList);
            if(pricebookEntryList.size()>0){
                for(PricebookEntry p : pricebookEntryList){
                    currencyIsoCodeList.add(p.CurrencyIsoCode);
                    //mapStandardPriceBookEntry.put(p.Id,p);
                }   
                //system.debug('@@mapStandardPriceBookEntry=='+mapStandardPriceBookEntry);
                if(currencyIsoCodeList.size()>0){
                    Date todate = system.today();
                    list<DatedConversionRate> datedConversionRateList = [SELECT Id, ConversionRate, IsoCode, StartDate 
                                                                         FROM DatedConversionRate 
                                                                         WHERE IsoCode in: currencyIsoCodeList order by StartDate DESC];     
                    
                    if(datedConversionRateList.size() > 0) {
                        for(DatedConversionRate objConversionRate : datedConversionRateList) {                    
                            if(!isoCodeMap.containskey(objConversionRate.IsoCode)) {
                                isoCodeMap.put(objConversionRate.IsoCode, objConversionRate.ConversionRate);
                            }     
                        }
                        for(PricebookEntry objPBE : pricebookEntryList) {
                            if(objPBE.Product2.Price__c != null) {
                                objPBE.UnitPrice = isoCodeMap.get(objPBE.CurrencyIsoCode) * objPBE.Product2.Price__c;
                                if(product2ActiveChangeIds.contains(objPBE.Product2Id)) {
                                    objPBE.isActive = newProductMap.get(objPBE.Product2Id).isActive;
                                }
                                pBEToUpdate.add(objPBE);
                                
                            } else {
                                if(product2ActiveChangeIds.contains(objPBE.Product2Id)){ objPBE.isActive = newProductMap.get(objPBE.Product2Id).isActive; }
                                pBEToUpdate.add(objPBE);
                            }
                        }
                    }                   
                } 
            }  
        }
        system.debug('@@pBEToUpdate-size=='+pBEToUpdate.size());
        system.debug('@@pBEToUpdate=='+pBEToUpdate);
        if(pBEToUpdate.size() > 0) {
           // Utility.processRecords(pBEToUpdate, 'update'); //#1289
           update pBEToUpdate;
        }
        //system.debug('@@mapStandardPriceBookEntry- keyset=='+mapStandardPriceBookEntry.keyset());
        
        //#602
        /*if(mapStandardPriceBookEntry.size() > 0) {
            for(Price_Book_Entry_Custom__c objCPB: [Select Id,List_Price__c,Price_Book_Entry_Id__c from Price_Book_Entry_Custom__c where Price_Book_Entry_Id__c in :mapStandardPriceBookEntry.keyset()]) {
                Price_Book_Entry_Custom__c customPBE = new Price_Book_Entry_Custom__c();
                customPBE.Id = objCPB.Id;
                if(mapStandardPriceBookEntry.containsKey(objCPB.Price_Book_Entry_Id__c)) {
                    customPBE.List_Price__c = mapStandardPriceBookEntry.get(objCPB.Price_Book_Entry_Id__c).UnitPrice;
                }
                lstCPBEupdate.add(customPBE);
            }
        }
        system.debug('@@lstCPBEupdate-size=='+lstCPBEupdate.size());
        system.debug('@@lstCPBEupdate=='+lstCPBEupdate);
        if(lstCPBEupdate.size() > 0) {
            update lstCPBEupdate;
        }*/
    }

    public static void deletePBEntryonChangePB(Map<Id, Product2> mapOldProduct, Map<Id, Product2> mapNewProduct){
        Map<Id,Id> mapproductsandOldPB = new Map<Id,Id>();
        Set<Id> productIds = new Set<Id>();
        Map<Id,Id> mapproductsandNewPB = new Map<Id, Id>();
        try{
            for(Product2 objProduct : mapNewProduct.values()){
                if(Trigger.IsUpdate && objProduct.Primary_Price_Book__c != mapOldProduct.get(objProduct.Id).Primary_Price_Book__c){
                    mapproductsandOldPB.put(objProduct.Id,mapOldProduct.get(objProduct.Id).Primary_Price_Book__c);
                    productIds.add(objProduct.Id);
                    mapproductsandNewPB.put(objProduct.Id,objProduct.Primary_Price_Book__c);
                }
            }
            System.debug('ProductId-->'+mapproductsandOldPB.keyset());
            System.debug('OldPricecBookId-->'+mapproductsandOldPB.values());
            List<PriceBookEntry> lstPriceBookEntry = [Select Id,Product2Id,Pricebook2Id from PriceBookEntry where Product2Id In: mapproductsandOldPB.keyset() AND Pricebook2Id In: mapproductsandOldPB.values()];
            System.debug('lstPriceBookEntry-->'+lstPriceBookEntry);
            Set<String> setPBEIds = new Set<String>();
            for(PriceBookEntry objPBE: lstPriceBookEntry){
                setPBEIds.add(objPBE.Id);
            }
            List<Price_Book_Entry_Custom__c> lstCustomPBE = [Select Id FROM Price_Book_Entry_Custom__c WHERE Price_Book_Entry_Id__c IN :setPBEIds];
            if(lstPriceBookEntry.size() > 0){ 
              //  Utility.processRecords(lstPriceBookEntry, 'delete');  //#1289
                delete lstPriceBookEntry;
               }
            if(lstCustomPBE.size() > 0){ 
                //Utility.processRecords(lstCustomPBE, 'delete');   //#1289
                delete lstCustomPBE;                
                }
        }
        catch(Exception ex){ Log.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
            System.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
        }
        insertNewPriceBookEntries(productIds);
    }

    public static void insertNewPriceBookEntries(Set<Id> productIds) {
        List<Product2> lstProduct = new List<Product2>();
        try{
            if(productIds != null && productIds.size() > 0) {
            lstProduct = [SELECT Id, Name, Price__c, RecordTypeId, isActive, Primary_Price_Book__c FROM Product2 
                                    WHERE Id IN: productIds AND Primary_Price_Book__c != null];
            }
            
            if(lstProduct != null && lstProduct.size() > 0) {
                List<PricebookEntry> insertPBE = new List<PricebookEntry>();
                List<PricebookEntry> insertstdPBE = new List<PricebookEntry>();
                Map<string, double> isoCodeMap = new Map<string, double>();
               
               
                
                List<CurrencyType> currencyList = [SELECT Id, ISOCode, ConversionRate, IsCorporate FROM CurrencyType WHERE IsActive=TRUE];
                    
                for(DatedConversionRate d : [SELECT Id, ConversionRate, IsoCode, StartDate FROM DatedConversionRate ORDER BY StartDate DESC]) {                    
                    if(!isoCodeMap.containskey(d.IsoCode)) {
                        isoCodeMap.put(d.IsoCode, d.ConversionRate);
                    }
                }
                    for(Product2 item: lstProduct) {
                        for(CurrencyType currencys :  currencyList) {
                            
                            
                            PricebookEntry objPriceBookEntry = new PricebookEntry();
                            objPriceBookEntry.unitprice = isoCodeMap.get(currencys.ISOCode) * item.Price__c;
                            objPriceBookEntry.Product2Id = item.Id;
                            objPriceBookEntry.isActive=true;
                            objPriceBookEntry.CurrencyIsoCode = currencys.ISOCode;
                            objPriceBookEntry.Pricebook2Id = item.Primary_Price_Book__c;
                            objPriceBookEntry.UseStandardPrice = false;
                            insertPBE.add(objPriceBookEntry);
                        }
                    }
                    
                    if(insertPBE != null && insertPBE.size() > 0) {
                        System.debug('@@@insertPBE: '+insertPBE);
                        
                        insertPBE = Utility.processRecords(insertPBE, 'insert');
                        
                        /***** Custom Price Book Entry *****/
                        List<Price_Book_Entry_Custom__c> lstCustomPBE = new List<Price_Book_Entry_Custom__c>();
                        
                        for(PricebookEntry objPBE: insertPBE) { Price_Book_Entry_Custom__c objCustomPBE = new Price_Book_Entry_Custom__c();
                            objCustomPBE.CurrencyIsoCode = objPBE.CurrencyIsoCode; objCustomPBE.Price_Book__c = objPBE.Pricebook2Id;
                            objCustomPBE.Price_Book_Entry_Id__c = objPBE.Id; objCustomPBE.Product__c = objPBE.Product2Id; lstCustomPBE.add(objCustomPBE);
                        }
                        
                       // Utility.processRecords(lstCustomPBE, 'insert'); //#1289
                       insert lstCustomPBE;
                    }
                
            }
        }
        catch(Exception ex){ Log.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
            System.debug('Error: ' + ex.getMessage() + '--' + ex.getLineNumber() + '--' + ex.getStackTraceString());
        }
        
    }
    
    /**
    * @description  : deleteRelatedBundleProducts
    * @author       : fesalsuraitawala@addonblue.com
    * @param        : oldProductList(List of Product)
    * @return       : void
    **/
    public void deleteRelatedBundleProducts(List<Product2> oldProductList) {
        System.debug('@@@oldProductList: ' +oldProductList);
        List<Products_Bundle__c> lstBundleProduct = new List<Products_Bundle__c>();
        if(oldProductList != null && oldProductList.size() > 0) {
            lstBundleProduct = [SELECT Id, Name, Child_product__c, Parent_Product__c FROM Products_Bundle__c 
                                WHERE Child_product__c IN :oldProductList OR Parent_Product__c IN :oldProductList];
            
            System.debug('@@@lstBundleProduct : ' +lstBundleProduct);
            if(lstBundleProduct.size() > 0) {
                delete lstBundleProduct;
            }
        }
    }
}